name: test on ubuntu-20.04

on:
  push:
    branches: [ master, develop, 'feature/**' ]
  pull_request:
    branches: [ master, develop ]

#env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04]
        BUILD_TYPE: [Debug, Release]
        compiler: [{'cc': gcc-9, 'cxx': g++-9}, {'cc': gcc-10, 'cxx': g++-10}, {'cc': clang-12, 'cxx': clang++-12}]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: CC=${{matrix.compiler.cc}} CXX=${{matrix.compiler.cxx}} cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.BUILD_TYPE}} --verbose

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure -C ${{matrix.BUILD_TYPE}}


